{"version":3,"sources":["dummy.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultContent","App","useState","content","setContent","parsedContent","setParsedContent","marked","setOptions","breaks","highlight","code","console","log","Prism","languages","javascript","useEffect","parse","Box","className","height","display","flexDirection","alignItems","flex","pr","pl","border","Typography","variant","component","TextareaAutosize","id","minRows","maxRows","value","onChange","event","target","placeholder","width","color","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA4CeA,EA5CK,ypC,wBC2FLC,EAlFH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEAC,SAAOC,WAAW,CAChBC,QAAQ,EACRC,UAAW,SAAUC,GAEnB,OADAC,QAAQC,IAAIF,GACLG,IAAMJ,UAAUC,EAAMG,IAAMC,UAAUC,WAAY,iBAkB7D,OAVAC,qBAAU,WAIR,OAFAb,EAAWJ,GACXM,EAAiBC,SAAOW,MAAMlB,IACvB,YAEI,KAEV,IAGD,eAACmB,EAAA,EAAD,CACEC,UAAU,MACVC,OAAO,QACPC,QAAQ,OACRC,cAAc,MACdC,WAAW,SALb,UAOE,cAACL,EAAA,EAAD,CAAKM,KAAM,EAAGJ,OAAO,MAAMK,GAAI,EAAGC,GAAI,EAAtC,SACE,eAACR,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAKS,OAAO,kBAAZ,SACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,sBAIF,cAACC,EAAA,EAAD,CACEZ,UAAU,SACVa,GAAG,SACH,aAAW,SACXC,QAAS,GACTC,QAAS,GACTC,MAAOjC,EACPkC,SApCW,SAACC,GACpBlC,EAAWkC,EAAMC,OAAOH,OACxB9B,EAAiBC,SAAOW,MAAMoB,EAAMC,OAAOH,SAmCnCI,YAAY,gBAKlB,eAACrB,EAAA,EAAD,CACEM,KAAM,EACNgB,MAAO,MACPpB,OAAO,MACPK,GAAI,GACJC,GAAI,GACJL,QAAQ,OACRC,cAAc,SAPhB,UASE,cAACJ,EAAA,EAAD,CAAKS,OAAO,kBAAkBH,KAAM,EAApC,SACE,cAACI,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,uBAKF,cAACZ,EAAA,EAAD,CAAKS,OAAQ,EAAGa,MAAO,OAAQpB,OAAQ,OAAQI,KAAM,GAArD,SACE,cAACI,EAAA,EAAD,CACER,OAAQ,OACRY,GAAG,UACHS,MAAM,UACNC,wBAAyB,CAAEC,OAAQvC,cCrEhCwC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e0b799fd.chunk.js","sourcesContent":["const defaultContent = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`;\r\nexport default defaultContent;\r\n","import { TextareaAutosize } from \"@mui/core\";\nimport { Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport \"./App.css\";\nimport { marked } from \"marked\";\nimport { ChangeEvent, useEffect, useState } from \"react\";\nimport defaultContent from \"./dummy\";\nimport Prism from \"prismjs\";\n\nconst App = () => {\n  const [content, setContent] = useState(\"\");\n  const [parsedContent, setParsedContent] = useState(\"\");\n\n  marked.setOptions({\n    breaks: true,\n    highlight: function (code: string) {\n      console.log(code);\n      return Prism.highlight(code, Prism.languages.javascript, \"javascript\");\n    },\n  });\n\n  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setContent(event.target.value);\n    setParsedContent(marked.parse(event.target.value));\n  };\n  useEffect(() => {\n    let effect = true;\n    setContent(defaultContent);\n    setParsedContent(marked.parse(defaultContent));\n    return () => {\n      // eslint-disable-next-line\n      effect = false;\n    };\n  }, []);\n\n  return (\n    <Box\n      className=\"App\"\n      height=\"100vh\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n    >\n      <Box flex={6} height=\"80%\" pr={2} pl={2}>\n        <Box>\n          <Box border=\"1px solid black\">\n            <Typography variant=\"h6\" component=\"div\">\n              Editor\n            </Typography>\n          </Box>\n          <TextareaAutosize\n            className=\"Editor\"\n            id=\"editor\"\n            aria-label=\"Editor\"\n            minRows={34}\n            maxRows={35}\n            value={content}\n            onChange={handleChange}\n            placeholder=\"Editor\"\n          />\n        </Box>\n      </Box>\n\n      <Box\n        flex={6}\n        width={\"50%\"}\n        height=\"80%\"\n        pr={10}\n        pl={10}\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <Box border=\"1px solid black\" flex={1}>\n          <Typography variant=\"h6\" component=\"div\">\n            Preview\n          </Typography>\n        </Box>\n\n        <Box border={1} width={\"100%\"} height={\"100%\"} flex={11}>\n          <Typography\n            height={\"100%\"}\n            id=\"preview\"\n            color=\"inherit\"\n            dangerouslySetInnerHTML={{ __html: parsedContent }}\n          ></Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}